package interfaces;

import BANCODEDADOS.ConexaoDAO;

import java.sql.SQLException;
import java.sql.ResultSet;

import java.time.DateTimeException;

import java.sql.Connection;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Adriano
 */
public class TabelaConta extends javax.swing.JFrame {

    /**
     * Creates new form Tabela_Contas
     */
    public TabelaConta() {
        setResizable(false);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Senha = new javax.swing.JPasswordField();
        Dia = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        AlterarConta1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        tipoConta = new javax.swing.JComboBox<>();
        Mes = new javax.swing.JTextField();
        Carregardados = new javax.swing.JButton();
        Ano = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CPF = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        nome_completo = new javax.swing.JTextField();
        Email = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        AtualizarDados = new javax.swing.JButton();
        InserirConta = new javax.swing.JButton();
        RemoverConta = new javax.swing.JButton();
        digitarBuscar = new javax.swing.JTextField();
        Buscar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        Senha1 = new javax.swing.JPasswordField();
        Dia1 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        SalvarAlteracao = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        tipoConta1 = new javax.swing.JComboBox<>();
        Mes1 = new javax.swing.JTextField();
        Carregardados1 = new javax.swing.JButton();
        Ano1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        CPF1 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        nome_completo1 = new javax.swing.JTextField();
        Email1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        jLabel8.setText("Senha:");

        jLabel5.setText("Data de Nascimento:");

        Senha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SenhaActionPerformed(evt);
            }
        });

        Dia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaActionPerformed(evt);
            }
        });

        jLabel11.setText("Tipo de Conta:");

        AlterarConta1.setText("Salvar Alteração");
        AlterarConta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlterarConta1ActionPerformed(evt);
            }
        });

        jLabel9.setText("/");

        tipoConta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Usuário", "Funcionário" }));
        tipoConta.setToolTipText("");
        tipoConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoContaActionPerformed(evt);
            }
        });

        Mes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MesActionPerformed(evt);
            }
        });

        Carregardados.setText("Carregar Dados");
        Carregardados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarregardadosActionPerformed(evt);
            }
        });

        Ano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnoActionPerformed(evt);
            }
        });

        jLabel12.setText("/");

        jLabel6.setText("CPF:");

        CPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPFActionPerformed(evt);
            }
        });

        jLabel7.setText("Email:");

        nome_completo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nome_completoActionPerformed(evt);
            }
        });

        Email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmailActionPerformed(evt);
            }
        });

        jLabel3.setText("Nome completo:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Contas Registradas"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "nome_completo", "data_nascimento", "cpf", "email", "tipo", "idade"
            }
        ));
        jTable1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(jTable1);

        AtualizarDados.setText("Atualizar Dados");
        AtualizarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtualizarDadosActionPerformed(evt);
            }
        });

        InserirConta.setText("Inserir Conta");
        InserirConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InserirContaActionPerformed(evt);
            }
        });

        RemoverConta.setText("Remover Conta");
        RemoverConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoverContaActionPerformed(evt);
            }
        });

        digitarBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                digitarBuscarActionPerformed(evt);
            }
        });

        Buscar.setText("Buscar");
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });

        jLabel10.setText("Senha:");

        jLabel13.setText("Data de Nascimento:");

        Senha1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Senha1ActionPerformed(evt);
            }
        });

        Dia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Dia1ActionPerformed(evt);
            }
        });

        jLabel14.setText("Tipo de Conta:");

        SalvarAlteracao.setText("Salvar Alteração");
        SalvarAlteracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalvarAlteracaoActionPerformed(evt);
            }
        });

        jLabel15.setText("/");

        tipoConta1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Usuário", "Funcionário" }));
        tipoConta1.setToolTipText("");
        tipoConta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoConta1ActionPerformed(evt);
            }
        });

        Mes1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Mes1ActionPerformed(evt);
            }
        });

        Carregardados1.setText("Carregar Dados");
        Carregardados1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Carregardados1ActionPerformed(evt);
            }
        });

        Ano1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ano1ActionPerformed(evt);
            }
        });

        jLabel16.setText("/");

        jLabel17.setText("CPF:");

        CPF1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPF1ActionPerformed(evt);
            }
        });

        jLabel18.setText("Email:");

        nome_completo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nome_completo1ActionPerformed(evt);
            }
        });

        Email1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Email1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Nome completo:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(digitarBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addComponent(AtualizarDados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InserirConta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RemoverConta)
                .addGap(275, 275, 275))
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Carregardados1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(67, 67, 67)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel17)
                                .addComponent(CPF1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(Dia1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Mes1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel16)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Ano1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(nome_completo1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(306, 306, 306)
                            .addComponent(SalvarAlteracao))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(tipoConta1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Email1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel10)
                    .addComponent(Senha1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(383, 383, 383))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(digitarBuscar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(InserirConta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AtualizarDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RemoverConta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(Buscar))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(Carregardados1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(nome_completo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Dia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Mes1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(Ano1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Email1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Senha1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CPF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tipoConta1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addComponent(SalvarAlteracao)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exibirDadosTabela() {
        try {
            Connection conn = ConexaoDAO.conectaBD();
            String selectSql = "SELECT nome_completo, data_nascimento, cpf, email, senha, tipo_conta, idade FROM usuarios";
            PreparedStatement selectStmt = conn.prepareStatement(selectSql);
            ResultSet rs = selectStmt.executeQuery();

            // Configurar o modelo da tabela
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Nome Completo");
            model.addColumn("Data de Nascimento");
            model.addColumn("CPF");
            model.addColumn("E-mail");
            model.addColumn("Senha"); // Coluna "Senha" após a coluna "E-mail"
            model.addColumn("Tipo de Conta");
            model.addColumn("Idade");

            // Preencher a tabela com os dados do ResultSet
            while (rs.next()) {
                String nomeCompleto = rs.getString("nome_completo");
                Date dataNascimento = rs.getDate("data_nascimento");
                String cpf = rs.getString("cpf");
                String email = rs.getString("email");
                String senha = rs.getString("senha");
                String tipoConta = rs.getString("tipo_conta");
                int idade = rs.getInt("idade");

                model.addRow(new Object[]{nomeCompleto, dataNascimento, cpf, email, senha, tipoConta, idade});
            }

            // Definir o modelo da tabela
            jTable1.setModel(model);

            rs.close();
            selectStmt.close();
            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao exibir dados da tabela: " + ex.getMessage());
        }
    }

    private void SenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SenhaActionPerformed
        String senha = Senha.getText();

        // Verifica se a senha está vazia
        if (senha.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Campo de senha vazio. Por favor, insira uma senha.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SenhaActionPerformed

    private void DiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaActionPerformed
        String diaText = Dia.getText();

        // Verifica se o campo de dia contém apenas números e tem no máximo 2 dígitos
        if (!diaText.matches("\\d{1,2}")) {
            JOptionPane.showMessageDialog(null, "Valor inválido para o dia. Insira um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            Dia.setText(""); // Limpa o campo Campo_Dia
        }
    }//GEN-LAST:event_DiaActionPerformed

    private void AlterarConta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlterarConta1ActionPerformed
        String nome = nome_completo.getText();
        String diaText = Dia.getText();
        String mesText = Mes.getText();
        String anoText = Ano.getText();
        String cpf = CPF.getText();
        String email = Email.getText();
        String senha = new String(Senha.getPassword());
        String tipoSelecionado = (String) tipoConta.getSelectedItem();

        // Validar os valores dos campos de texto
        if (nome.isEmpty() || diaText.isEmpty() || mesText.isEmpty() || anoText.isEmpty()
                || cpf.isEmpty() || email.isEmpty() || senha.isEmpty() || tipoSelecionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validar a data de nascimento
        try {
            LocalDate.of(Integer.parseInt(anoText), Integer.parseInt(mesText), Integer.parseInt(diaText));
        } catch (NumberFormatException | DateTimeException e) {
            JOptionPane.showMessageDialog(this, "Data de nascimento inválida.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Atualizar os dados do usuário no banco de dados
        try (Connection conn = ConexaoDAO.conectaBD(); PreparedStatement stmt = conn.prepareStatement("UPDATE usuarios SET data_nascimento=?, cpf=?, email=?, senha=?, tipo_conta=? WHERE nome_completo=?")) {
            stmt.setString(1, diaText + "-" + mesText + "-" + anoText);
            stmt.setString(2, cpf);
            stmt.setString(3, email);
            stmt.setString(4, senha);
            stmt.setString(5, tipoSelecionado);
            stmt.setString(6, nome);
            int rowsAffected = stmt.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Dados atualizados corretamente.");
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum registro atualizado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar os dados do usuário: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }

    }//GEN-LAST:event_AlterarConta1ActionPerformed

    private void tipoContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoContaActionPerformed
        String tipoSelecionado = (String) tipoConta.getSelectedItem();
        JOptionPane.showMessageDialog(null, "Selecionado: " + tipoSelecionado);
    }//GEN-LAST:event_tipoContaActionPerformed

    private void MesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MesActionPerformed
        String mesText = Mes.getText();

        // Verifica se o campo de mês contém apenas números e tem no máximo 2 dígitos
        if (!mesText.matches("\\d{1,2}")) {
            JOptionPane.showMessageDialog(null, "Valor inválido para o mês. Insira um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            Mes.setText(""); // Limpa o campo Campo_Mes
        }
    }//GEN-LAST:event_MesActionPerformed

    private void CarregardadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarregardadosActionPerformed

    }//GEN-LAST:event_CarregardadosActionPerformed

    private void AnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnoActionPerformed
        // Obtém o ano informado no campo Campo_Ano
        int ano = Integer.parseInt(Ano.getText());

        // Obtém a data atual
        Calendar dataAtual = Calendar.getInstance();

        // Define o limite de idade permitido
        Calendar limiteIdade = Calendar.getInstance();
        limiteIdade.add(Calendar.YEAR, -120);

        // Verifica se a diferença entre o ano informado e a data atual é maior que 120 anos
        if (dataAtual.get(Calendar.YEAR) - ano > 120) {
            JOptionPane.showMessageDialog(null, "Idade inválida. A idade não pode ser superior a 120 anos.", "Erro", JOptionPane.ERROR_MESSAGE);
            Ano.setText(""); // Limpa o campo Campo_Ano
        }
    }//GEN-LAST:event_AnoActionPerformed

    private void CPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPFActionPerformed
        //Validar CPF
        String cpf = CPF.getText();

        // Remover caracteres não numéricos do CPF
        cpf = cpf.replaceAll("[^0-9]", "");

        // Verificar se o CPF tem 11 dígitos
        if (cpf.length() != 11) {
            // CPF inválido
            JOptionPane.showMessageDialog(null, "CPF inválido. Por favor, insira um CPF válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar se todos os dígitos são iguais
        boolean digitosIguais = true;
        for (int i = 1; i < 11; i++) {
            if (cpf.charAt(i) != cpf.charAt(0)) {
                digitosIguais = false;
                break;
            }
        }
        if (digitosIguais) {
            // CPF inválido
            JOptionPane.showMessageDialog(null, "CPF inválido. Por favor, insira um CPF válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Calcular o primeiro dígito verificador
        int soma = 0;
        for (int i = 0; i < 9; i++) {
            soma += (cpf.charAt(i) - '0') * (10 - i);
        }
        int digito1 = 11 - (soma % 11);
        if (digito1 > 9) {
            digito1 = 0;
        }

        // Calcular o segundo dígito verificador
        soma = 0;
        for (int i = 0; i < 10; i++) {
            soma += (cpf.charAt(i) - '0') * (11 - i);
        }
        int digito2 = 11 - (soma % 11);
        if (digito2 > 9) {
            digito2 = 0;
        }

        // Verificar se os dígitos verificadores estão corretos
        if (digito1 == (cpf.charAt(9) - '0') && digito2 == (cpf.charAt(10) - '0')) {
            // CPF válido
            // Faça o que precisa ser feito
        } else {
            // CPF inválido
            JOptionPane.showMessageDialog(null, "CPF inválido. Por favor, insira um CPF válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CPFActionPerformed

    private void nome_completoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nome_completoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nome_completoActionPerformed

    private void EmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmailActionPerformed
        String email = Email.getText();
        String regex = "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(email);
        boolean isEmailValid = matcher.matches();

        if (!isEmailValid) {
            JOptionPane.showMessageDialog(null, "O e-mail fornecido é inválido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EmailActionPerformed

    private void Email1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Email1ActionPerformed
        String email = Email.getText();
        String regex = "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(email);
        boolean isEmailValid = matcher.matches();

        if (!isEmailValid) {
            JOptionPane.showMessageDialog(null, "O e-mail fornecido é inválido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Email1ActionPerformed

    private void nome_completo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nome_completo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nome_completo1ActionPerformed

    private void CPF1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPF1ActionPerformed
        //Validar CPF
        String cpf = CPF.getText();

        // Remover caracteres não numéricos do CPF
        cpf = cpf.replaceAll("[^0-9]", "");

        // Verificar se o CPF tem 11 dígitos
        if (cpf.length() != 11) {
            // CPF inválido
            JOptionPane.showMessageDialog(null, "CPF inválido. Por favor, insira um CPF válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar se todos os dígitos são iguais
        boolean digitosIguais = true;
        for (int i = 1; i < 11; i++) {
            if (cpf.charAt(i) != cpf.charAt(0)) {
                digitosIguais = false;
                break;
            }
        }
        if (digitosIguais) {
            // CPF inválido
            JOptionPane.showMessageDialog(null, "CPF inválido. Por favor, insira um CPF válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Calcular o primeiro dígito verificador
        int soma = 0;
        for (int i = 0; i < 9; i++) {
            soma += (cpf.charAt(i) - '0') * (10 - i);
        }
        int digito1 = 11 - (soma % 11);
        if (digito1 > 9) {
            digito1 = 0;
        }

        // Calcular o segundo dígito verificador
        soma = 0;
        for (int i = 0; i < 10; i++) {
            soma += (cpf.charAt(i) - '0') * (11 - i);
        }
        int digito2 = 11 - (soma % 11);
        if (digito2 > 9) {
            digito2 = 0;
        }

        // Verificar se os dígitos verificadores estão corretos
        if (digito1 == (cpf.charAt(9) - '0') && digito2 == (cpf.charAt(10) - '0')) {
            // CPF válido
            // Faça o que precisa ser feito
        } else {
            // CPF inválido
            JOptionPane.showMessageDialog(null, "CPF inválido. Por favor, insira um CPF válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CPF1ActionPerformed

    private void Ano1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ano1ActionPerformed
        // Obtém o ano informado no campo Campo_Ano
        int ano = Integer.parseInt(Ano.getText());

        // Obtém a data atual
        Calendar dataAtual = Calendar.getInstance();

        // Define o limite de idade permitido
        Calendar limiteIdade = Calendar.getInstance();
        limiteIdade.add(Calendar.YEAR, -120);

        // Verifica se a diferença entre o ano informado e a data atual é maior que 120 anos
        if (dataAtual.get(Calendar.YEAR) - ano > 120) {
            JOptionPane.showMessageDialog(null, "Idade inválida. A idade não pode ser superior a 120 anos.", "Erro", JOptionPane.ERROR_MESSAGE);
            Ano.setText(""); // Limpa o campo Campo_Ano
        }
    }//GEN-LAST:event_Ano1ActionPerformed

    private void Carregardados1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Carregardados1ActionPerformed
        int row = jTable1.getSelectedRow();

        if (row != -1) {
            // Obtém os valores do item selecionado na tabela
            String nomeCompleto = (String) jTable1.getValueAt(row, 0);
            Date dataNascimento = (Date) jTable1.getValueAt(row, 1);
            String cpf = (String) jTable1.getValueAt(row, 2);
            String email = (String) jTable1.getValueAt(row, 3);
            String senha = (String) jTable1.getValueAt(row, 4); // Obter o valor da coluna "Senha"
            String tipoConta = (String) jTable1.getValueAt(row, 5); // Ajustar o índice para a nova posição da coluna "Tipo de Conta"

            // Converter a data de nascimento para dia, mês e ano
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(dataNascimento);
            int dia = calendar.get(Calendar.DAY_OF_MONTH);
            int mes = calendar.get(Calendar.MONTH) + 1; // Os meses são baseados em zero (janeiro = 0)
            int ano = calendar.get(Calendar.YEAR);

            // Preencher os campos de texto com os valores obtidos
            nome_completo1.setText(nomeCompleto);
            Dia1.setText(Integer.toString(dia));
            Mes1.setText(Integer.toString(mes));
            Ano1.setText(Integer.toString(ano));
            CPF1.setText(cpf);
            Email1.setText(email);
            Senha1.setText(senha); // Preencher o campo de texto da senha
            tipoConta1.setSelectedItem(tipoConta);
        } else {
            // Nenhuma linha selecionada
            JOptionPane.showMessageDialog(null, "Nenhuma linha selecionada.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_Carregardados1ActionPerformed

    private void Mes1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Mes1ActionPerformed
        String mesText = Mes.getText();

        // Verifica se o campo de mês contém apenas números e tem no máximo 2 dígitos
        if (!mesText.matches("\\d{1,2}")) {
            JOptionPane.showMessageDialog(null, "Valor inválido para o mês. Insira um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            Mes.setText(""); // Limpa o campo Campo_Mes
        }
    }//GEN-LAST:event_Mes1ActionPerformed

    private void tipoConta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoConta1ActionPerformed
        String tipoSelecionado = (String) tipoConta.getSelectedItem();
        JOptionPane.showMessageDialog(null, "Selecionado: " + tipoSelecionado);
    }//GEN-LAST:event_tipoConta1ActionPerformed

    private void SalvarAlteracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalvarAlteracaoActionPerformed
        // Obter os valores dos campos de texto
        String nome = nome_completo1.getText();
        String diaText = Dia1.getText();
        String mesText = Mes1.getText();
        String anoText = Ano1.getText();
        String cpf = CPF1.getText();
        String email = Email1.getText();
        String senha = new String(Senha1.getPassword());
        String tipoSelecionado = (String) tipoConta1.getSelectedItem();

        // Validar os valores dos campos de texto
        // ...
        // Converter a data para o formato "ano/mês/dia"
        String dataNascimento = anoText + "-" + mesText + "-" + diaText;

        // Atualizar os dados do usuário no banco de dados
        try (Connection conn = ConexaoDAO.conectaBD(); PreparedStatement stmt = conn.prepareStatement("UPDATE usuarios SET data_nascimento=?, cpf=?, email=?, senha=?, tipo_conta=? WHERE nome_completo=?")) {
            stmt.setString(1, dataNascimento);
            stmt.setString(2, cpf);
            stmt.setString(3, email);
            stmt.setString(4, senha);
            stmt.setString(5, tipoSelecionado);
            stmt.setString(6, nome);
            int rowsAffected = stmt.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Dados atualizados corretamente.");
            } else {
                JOptionPane.showMessageDialog(null, "Nenhum registro atualizado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar os dados do usuário: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_SalvarAlteracaoActionPerformed

    private void Dia1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Dia1ActionPerformed
        String diaText = Dia.getText();

        // Verifica se o campo de dia contém apenas números e tem no máximo 2 dígitos
        if (!diaText.matches("\\d{1,2}")) {
            JOptionPane.showMessageDialog(null, "Valor inválido para o dia. Insira um número válido.", "Erro", JOptionPane.ERROR_MESSAGE);
            Dia.setText(""); // Limpa o campo Campo_Dia
        }
    }//GEN-LAST:event_Dia1ActionPerformed

    private void Senha1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Senha1ActionPerformed
        String senha = Senha.getText();

        // Verifica se a senha está vazia
        if (senha.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Campo de senha vazio. Por favor, insira uma senha.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Senha1ActionPerformed

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed
        try {
            String nome = digitarBuscar.getText();

            Connection conn = ConexaoDAO.conectaBD();
            String selectSql = "SELECT id, nome_completo, data_nascimento, cpf, email, tipo_conta, idade FROM usuarios WHERE nome_completo LIKE ?";
            PreparedStatement selectStmt = conn.prepareStatement(selectSql);
            selectStmt.setString(1, "%" + nome + "%");
            ResultSet rs = selectStmt.executeQuery();

            // Configurar o modelo da tabela
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");
            model.addColumn("Nome Completo");
            model.addColumn("Data de Nascimento");
            model.addColumn("CPF");
            model.addColumn("E-mail");
            model.addColumn("Tipo de Conta");
            model.addColumn("Idade");

            // Preencher a tabela com os dados do ResultSet
            while (rs.next()) {
                int id = rs.getInt("id");
                String nomeCompleto = rs.getString("nome_completo");
                Date dataNascimento = rs.getDate("data_nascimento");
                String cpf = rs.getString("cpf");
                String email = rs.getString("email");
                String tipoConta = rs.getString("tipo_conta");
                int idade = rs.getInt("idade");
                model.addRow(new Object[]{id, nomeCompleto, dataNascimento, cpf, email, tipoConta, idade});
            }

            // Definir o modelo da tabela
            jTable1.setModel(model);

            rs.close();
            selectStmt.close();
            conn.close();

            // Destacar a primeira linha da tabela
            if (jTable1.getRowCount() > 0) {
                jTable1.setRowSelectionInterval(0, 0);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao realizar a busca: " + ex.getMessage());
        }
        try {
            String nome = digitarBuscar.getText();

            Connection conn = ConexaoDAO.conectaBD();
            String selectSql = "SELECT id, nome_completo, data_nascimento, cpf, email, tipo_conta, idade FROM usuarios WHERE nome_completo LIKE ?";
            PreparedStatement selectStmt = conn.prepareStatement(selectSql);
            selectStmt.setString(1, "%" + nome + "%");
            ResultSet rs = selectStmt.executeQuery();

            // Configurar o modelo da tabela
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");
            model.addColumn("Nome Completo");
            model.addColumn("Data de Nascimento");
            model.addColumn("CPF");
            model.addColumn("E-mail");
            model.addColumn("Tipo de Conta");
            model.addColumn("Idade");

            // Preencher a tabela com os dados do ResultSet
            while (rs.next()) {
                int id = rs.getInt("id");
                String nomeCompleto = rs.getString("nome_completo");
                Date dataNascimento = rs.getDate("data_nascimento");
                String cpf = rs.getString("cpf");
                String email = rs.getString("email");
                String tipoConta = rs.getString("tipo_conta");
                int idade = rs.getInt("idade");
                model.addRow(new Object[]{id, nomeCompleto, dataNascimento, cpf, email, tipoConta, idade});
            }

            // Definir o modelo da tabela
            jTable1.setModel(model);

            rs.close();
            selectStmt.close();
            conn.close();

            // Destacar a primeira linha da tabela
            if (jTable1.getRowCount() > 0) {
                jTable1.setRowSelectionInterval(0, 0);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao realizar a busca: " + ex.getMessage());
        }
    }//GEN-LAST:event_BuscarActionPerformed

    private void digitarBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_digitarBuscarActionPerformed

    }//GEN-LAST:event_digitarBuscarActionPerformed

    private void RemoverContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoverContaActionPerformed
        int row = jTable1.getSelectedRow(); // Obtém a linha selecionada na tabela

        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um usuário para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String nomeUsuario = (String) jTable1.getValueAt(row, 0); // Obtém o valor da coluna "Nome do Usuário"

        int confirm = JOptionPane.showConfirmDialog(this, "Deseja excluir o usuário \"" + nomeUsuario + "\"?", "Confirmação", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                Connection conn = ConexaoDAO.conectaBD();
                String deleteSql = "DELETE FROM usuarios WHERE nome_completo = ?";
                PreparedStatement deleteStmt = conn.prepareStatement(deleteSql);
                deleteStmt.setString(1, nomeUsuario);
                int rowsAffected = deleteStmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Usuário excluído com sucesso.", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    exibirDadosTabela(); // Atualiza a exibição da tabela
                } else {
                    JOptionPane.showMessageDialog(this, "Não foi possível excluir o usuário.", "Erro", JOptionPane.ERROR_MESSAGE);
                }

                deleteStmt.close();
                conn.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao excluir o usuário: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_RemoverContaActionPerformed

    private void InserirContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InserirContaActionPerformed
        // Abrir a tela de InserirConta
        InserirConta teladeConta = new InserirConta();
        teladeConta.setVisible(true);
    }//GEN-LAST:event_InserirContaActionPerformed

    private void AtualizarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtualizarDadosActionPerformed
        exibirDadosTabela();
    }//GEN-LAST:event_AtualizarDadosActionPerformed

    private void jTable1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1AncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TabelaConta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TabelaConta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TabelaConta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TabelaConta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TabelaConta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AlterarConta1;
    private javax.swing.JTextField Ano;
    private javax.swing.JTextField Ano1;
    private javax.swing.JButton AtualizarDados;
    private javax.swing.JButton Buscar;
    private javax.swing.JTextField CPF;
    private javax.swing.JTextField CPF1;
    private javax.swing.JButton Carregardados;
    private javax.swing.JButton Carregardados1;
    private javax.swing.JTextField Dia;
    private javax.swing.JTextField Dia1;
    private javax.swing.JTextField Email;
    private javax.swing.JTextField Email1;
    private javax.swing.JButton InserirConta;
    private javax.swing.JTextField Mes;
    private javax.swing.JTextField Mes1;
    private javax.swing.JButton RemoverConta;
    private javax.swing.JButton SalvarAlteracao;
    private javax.swing.JPasswordField Senha;
    private javax.swing.JPasswordField Senha1;
    private javax.swing.JTextField digitarBuscar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nome_completo;
    private javax.swing.JTextField nome_completo1;
    private javax.swing.JComboBox<String> tipoConta;
    private javax.swing.JComboBox<String> tipoConta1;
    // End of variables declaration//GEN-END:variables
}
